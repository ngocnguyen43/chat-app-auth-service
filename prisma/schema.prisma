// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Options {
  password
  passkey
  otp
  oauth
  mfa
}

model User {
  id               String         @id @unique @default(uuid()) @map("user_id")
  currentChallenge String?        @map("current_challenge")
  createdAt        String         @map("created_at") @db.VarChar(13)
  updatedAt        String         @map("updated_at") @db.VarChar(13)
  AuthOtions       AuthnOptions[]
  GroupUsers       GroupUsers[]
  Tokens           Token?

  @@map("users")
}

model AuthnOptions {
  id     String  @id @unique @default(uuid()) @map("option_id")
  userId String  @map("user_id")
  Users  User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  option Options
  key    Json

  @@map("authn_options")
}

model Token {
  id               String  @id @unique @default(uuid()) @map("token_id")
  userId           String  @unique @map("user_id")
  publicKey        String? @map("public_key") @db.VarChar(500)
  refreshToken     String? @map("refresh_token") @db.VarChar(900)
  refreshTokenUsed Json?   @map("refresh_token_used")
  updatedAt        String  @map("updated_at") @db.VarChar(13)

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("tokens")
}

model GroupUsers {
  id      String @id @unique @default(uuid())
  userId  String @map("user_id")
  groupId String @map("group_id")
  // Groups  Group  @relation(fields: [groupId], references: [id])
  User    User?  @relation(fields: [userId], references: [id])
}
